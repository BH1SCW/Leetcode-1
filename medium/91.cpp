#include <iostream>
#include <vector>
#include <functional>
#include <algorithm>    // std::min_element, std::max_element
#include <initializer_list>
#include <unordered_set>
#include <unordered_map>
#include <string>
#include <limits.h>

using namespace std;
class Solution {
public:
    bool isInMap(long e, std::unordered_map<long, long>& set) {
        return not(set.find(e) == set.end());
    }
    long numDecodings(string s) {
        std::unordered_map<long,long> searched;
        std::function<long(long)> dfs = [&](long start) {
            if (start == s.size()) {
                return (long)1;
            } else {
                if (isInMap(start, searched)) return searched[start];
                if (s[start] == '0') return (long)0;
                long ans = 0;
                ans = dfs(start + 1);
                if ((s[start] == '1' && start < s.size() - 1 && s[start + 1] > '0') || (s[start] == '2' && start < s.size() - 1 && s[start + 1] <= '6'))
                ans += dfs(start + 2);
                searched[start] = ans;
                return ans;
            }
        };
        return dfs(0);
    }
};

int main() {
    // string s = "12";
    // string s = "226";
    // string s
    string s = "0";
    Solution sol = Solution();
    cout << sol.numDecodings(s) << endl;
    return 0;
}